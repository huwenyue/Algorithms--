//1143. Longest Common Subsequence
https://leetcode.com/problems/longest-common-subsequence/


class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        //f[i][j]: A的前i个字符A[0,...i-1]和B的前j个字符[0,...j-1]的最长公共子串
        int n = text1.size(), m = text2.size();
        int f[n+1][m+1];
        int pai[n+1][m+1];   //记录路径
        for(int i=0; i<=n; i++){
            for(int j=0; j<=m; j++){
                if(i==0 || j==0){
                    //空串
                    f[i][j] = 0;
                    continue;
                }
                
                f[i][j]  = max(f[i][j-1], f[i-1][j]);   
                if(text1[i-1] == text2[j-1])
                    f[i][j] = max(f[i][j], f[i-1][j-1] + 1);
                
            }
        }
        
        return f[n][m];
    }
};


//把最长公共子序列输出：res
//用pai来记录取哪个text的字符
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        //f[i][j]: A的前i个字符A[0,...i-1]和B的前j个字符[0,...j-1]的最长公共子串
        int n = text1.size(), m = text2.size();
        int f[n+1][m+1];
        int pai[n+1][m+1];   //记录路径
        for(int i=0; i<=n; i++){
            for(int j=0; j<=m; j++){
                if(i==0 || j==0){
                    //空串
                    f[i][j] = 0;
                    continue;
                }
                
                f[i][j]  = max(f[i-1][j], f[i][j-1]);  
                if(f[i][j] == f[i-1][j] )
                    pai[i][j] = 1;
                else
                    pai[i][j] = 2;
                if(text1[i-1] == text2[j-1]){
                    f[i][j] = max(f[i][j], f[i-1][j-1] + 1);
                    if(f[i][j] == f[i-1][j-1] + 1)
                        pai[i][j] = 3;
                }
            }
        }
        
        char res[f[n][m]];
        int p = f[n][m]-1;    //倒着填入
        int i = n, j = m;
        while(i>0 && j>0){
            if(pai[i][j] ==1)
                i--;  //不要text1的最后一个
            else if(pai[i][j] == 2)
                j--;   //不要text2的最后一个
            else{
                res[p] = text1[i-1];
                p--;
                i--;
                j--;
            }
        }
        
        for(p=0; p<f[n][m]; p++)
            cout<<res[p];
        cout<<endl;
        return f[n][m];
    }
};
