//72. Edit Distance
https://leetcode.com/problems/edit-distance/


//二维DP
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        int f[m+1][n+1];
        
        for(int i=0; i<=m; ++i){
            for(int j=0; j<=n; ++j){
                if(i==0){
                    f[i][j] = j;
                    continue;
                }
                    
                if(j==0){
                    f[i][j] = i;
                    continue;
                }
                
                //delete  add
                f[i][j] = min(f[i-1][j]+1, f[i][j-1]+1);
                //replace
                f[i][j] = min(f[i][j], f[i-1][j-1]+1);
                //equal
                if(word1[i-1] == word2[j-1])
                    f[i][j] = min(f[i][j], f[i-1][j-1]);
            }
        }
        
        return f[m][n];
    }
};


//滚动数组
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        int f[2][n+1];
        int old=0, now=1;
        for(int i=0; i<=m; ++i){
            old = now;
            now = 1-now;
            for(int j=0; j<=n; ++j){
                if(i==0){
                    f[now][j] = j;
                    continue;
                }
                    
                if(j==0){
                    f[now][j] = i;
                    continue;
                }
                
                //delete  add
                f[now][j] = min(f[old][j]+1, f[now][j-1]+1);
                //replace
                f[now][j] = min(f[now][j], f[old][j-1]+1);
                //equal
                if(word1[i-1] == word2[j-1])
                    f[now][j] = min(f[now][j], f[old][j-1]);
            }
        }
        
        return f[now][n];
    }
};
