https://www.lintcode.com/problem/k-sum/description
//89. K数之和

class Solution {
public:
    /**
     * @param A: An integer array
     * @param k: A positive integer (k <= length(A))
     * @param target: An integer
     * @return: An integera
     */
    int kSum(vector<int> &A, int k, int target) {
        // write your code here
        int n = A.size();
        int f[n+1][k+1][target+1]; //前i个选出k个数使得它们和为target的方案数
        //init
        fill((int*)f, (int*)f+(n+1)*(k+1)*(target+1), 0);  //f[0][j][t]=0
        f[0][0][0] = 1;
        for(int i=1; i<=n; i++){
            for(int j=0; j<=k; j++){
                for(int t=0; t<=target; t++){
                    f[i][j][t] = f[i-1][j][t];
                    if(j>=1 && t>=A[i-1])  //至少选出一个元素且剩余目标值>=A[i-1]
                        f[i][j][t] += f[i-1][j-1][t-A[i-1]];
                }
            }
        }
        return f[n][k][target];
    }
};


//滚动数组优化

class Solution {
public:
    /**
     * @param A: An integer array
     * @param k: A positive integer (k <= length(A))
     * @param target: An integer
     * @return: An integera
     */
    int kSum(vector<int> &A, int k, int target) {
        // write your code here
        int n = A.size();
        int old=0, now = 1;
        int f[2][k+1][target+1]; //前i个选出k个数使得它们和为target的方案数
        //init
        fill((int*)f, (int*)f+2*(k+1)*(target+1), 0);  //f[0][j][t]=0
        f[now][0][0] = 1;
        
        for(int i=1; i<=n; i++){
            old = now;
            now = 1-now;
            for(int j=0; j<=k; j++){
                for(int t=0; t<=target; t++){
                    f[now][j][t] = f[old][j][t];
                    if(j>=1 && t>=A[i-1])  //至少选出一个元素且剩余目标值>=A[i-1]
                        f[now][j][t] += f[old][j-1][t-A[i-1]];
                }
            }
        }
        return f[now][k][target];
    }
};
