//91. Minimum Adjustment Cost
https://www.lintcode.com/problem/minimum-adjustment-cost/description


class Solution {
public:
    /*
     * @param A: An integer array
     * @param target: An integer
     * @return: An integer
     */
    int MinAdjustmentCost(vector<int> &A, int target) {
        // write your code here
        int n = A.size();
        int f[n+1][100+1];    //A的前i个元素改成B的最小代价A[i-1]改成j
        
        //init 前1个元素前面没有元素，只用考虑自己修改的代价
        for(int i=1; i<=100; i++){
            //将前1个元素改成i的代价
            f[1][i] = abs(A[0]-i);
        }
        
        for(int i=2; i<=n; i++){
            for(int j=1; j<=100; j++){
                f[i][j] = INT_MAX;   //init
                //枚举前一个元素修改为k的代价，j-target<=k<=j+target
                for(int k=j-target; k<=j+target; k++){
                    if(k<1 || k>100)
                        continue;
                    f[i][j] = min(f[i][j], f[i-1][k]+abs(A[i-1]-j)) ;  //f[i-1][k]:前i-1个元素改成k
                }
            }
        }
        
        int res = INT_MAX;
        for(int i=1; i<=100; i++)
            res = min(res, f[n][i]);
        
        return res;
    }
};
