https://www.lintcode.com/problem/backpack/description
//92. 背包问题

class Solution {
public:
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @return: The maximum size
     */
    int backPack(int m, vector<int> &A) {
        // write your code here
        int n = A.size();
        if(n==0)
            return 0;
        bool f[n+1][m+1];
        fill(f[0], f[0]+(n+1)*(m+1), false);
        f[0][0] = true;
        /*
        for(int j=1; j<=m; j++)
            f[0][j] = false;
        */
        for(int i=1; i<=n; ++i){
            for(int j=0; j<=m; ++j){
                f[i][j] = f[i-1][j];
                if(j>=A[i-1])
                f[i][j] = f[i][j] || f[i-1][j-A[i-1]];
            }
        }
        
        for(int i = m; i>=0; i--)
            if(f[n][i])
                return i;
    }
};
