//Backpack V
给定N个正整数nums[0]...nums[n-1]，一个正整数Target, 求有多少种组合加起来是Target,每个nums[i]只能用一次。
如：nums=[1,2,3,3,7], Target = 7, 输出：2 (7=7, 1+3+3=7)

class Solution {
public:
    /**
     * @param nums: an integer array and all positive numbers, no duplicates
     * @param target: An integer
     * @return: An integer
     */
    int backPackVI(vector<int> &nums, int target) {
        // write your code here
        if(nums.empty())
          return 0;
        int n = nums.size();
        int f[target+1];    //和为target的总和数
        //初始化
        fill(f, f+target+1, 0);
        f[0] = 1;     
        
        for(int i=1; i<=n; ++i){
        //枚举前i个物品有几种方式可以拼出重量为j
          for(int j=T; j>=0; --j){
              //j从大到小枚举
              //f[j] + f[j-nums[i-1]
              if(j >= nums[i-1])
                //f'[j]
                //cover f[j]
                f[j] += f[j - A[i-1]];
          }
       }
       return f[T];
    }
};
