https://www.lintcode.com/problem/bomb-enemy/description
// 553. Bomb Enemy


class Solution {
public:
    /**
     * @param grid: Given a 2D grid, each cell is either 'W', 'E' or '0'
     * @return: an integer, the maximum enemies you can kill using one bomb
     */
    int maxKilledEnemies(vector<vector<char>> &grid) {
        // write your code here
        if(grid.empty() || grid[0].empty())
            return 0;
        int row = grid.size(), col = grid[0].size();
        
        //up, down right, left
        int f[row][col];
        //将四个方向都加到res中
        int res[row][col];  //how many enemies can be killed by a bomb put at grid(i,j)
        //初始化
        memset(res, 0, sizeof(res));
        
        //up 
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                //res[i][j] = 0;
                if(grid[i][j] == 'W')
                    f[i][j] = 0;
                else{
                    f[i][j] = 0;
                    if(grid[i][j] == 'E')
                        f[i][j] = 1;
                    
                    if(i-1 >= 0)
                        f[i][j] += f[i-1][j];
                }
                res[i][j] += f[i][j];
            }
        }
        
        //down 从最后一行往上算
        for(int i=row-1 ; i>=0 ; i--){
            for(int j=0 ; j<col ; j++){
                //res[i][j] = 0;
                if(grid[i][j] == 'W')
                    f[i][j] = 0;
                else{
                    f[i][j] = 0;
                    if(grid[i][j] == 'E')
                        f[i][j] = 1;
                    
                    if(i+1 < row)
                        f[i][j] += f[i+1][j];
                }
                res[i][j] += f[i][j];
            }
        }
    
        //left
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                //res[i][j] = 0;
                if(grid[i][j] == 'W')
                    f[i][j] = 0;
                else{
                    f[i][j] = 0;
                    if(grid[i][j] == 'E')
                        f[i][j] = 1;
                    
                    if(j-1 >= 0)
                        f[i][j] += f[i][j-1];
                }
                res[i][j] += f[i][j];
            }
        }
        
        //right 从最右一行往中间算
        for(int i=0; i<row; i++){
            for(int j = col-1 ; j>=0; j--){
                //res[i][j] = 0;
                if(grid[i][j] == 'W')
                    f[i][j] = 0;
                else{
                    f[i][j] = 0;
                    if(grid[i][j] == 'E')
                        f[i][j] = 1;
                    
                    if(j+1 < col)
                        f[i][j] += f[i][j+1];
                }
                res[i][j] += f[i][j];
            }
        }
        
        int result = 0;
        for(int i=0; i<row; ++i){
            for(int j=0; j<col; ++j){
                if(grid[i][j] == '0')
                    //格子上是空
                    result = max(res[i][j], result);
            }
        }
        
        return result;
        
    }
};
