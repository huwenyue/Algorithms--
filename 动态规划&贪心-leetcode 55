https://www.lintcode.com/problem/jump-game/description lintcode 116 
Jump Game
//动态规划
class Solution {
public:
    /**
     * @param A: A list of integers
     * @return: A boolean
     */
    bool canJump(vector<int> &A) {
        // write your code here
        int n = A.size();
        bool f[n];
        f[0] = true;
        for(int j=1; j<n; ++j){
            f[j] = false;   //初始化假设跳不到
            //previous stone
            //last jump is from i to j
            for(int i=0; i<j; ++i){
                if(f[i] && i+A[i]>=j){
                    f[j] = true;
                    break;
                }
            }
        }
        return f[n-1];
    }
};

//贪心
class Solution {
public:
    /**
     * @param A: A list of integers
     * @return: A boolean
     */
    bool canJump(vector<int> &A) {
        // write your code here
        if(A.size()<2)
            return true;
        int n = A.size();
        int f[n]={0};
        
        f[0] = A[0];
        for(int j=1; j<=f[j-1] && j<n; ++j){
            f[j] = max(f[j-1], j + A[j]);
        }
        return f[n-1]>=n-1? true: false;
    }
};

//贪心不用一维数组保存状态
class Solution {
public:
    bool canJump(vector<int>& nums) {
        if(nums.size()<2)
            return true;
        int reach = 0;  //reach: 记录从当前位置能到达的最远的位置
        for(int i=0; i<=reach && i<nums.size(); ++i){
            reach = max(reach, i+nums[i]);
            if(reach >= nums.size()-1) //能到达队尾
                return true;
        }
        return false;
    }
};
